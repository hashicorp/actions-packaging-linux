# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

# action name
name: 'build-linux-packages'

# action author
author: 'Kyle Penfound <kpenfound@hashicorp.com>'

# action description
description: 'Packages binaries using nfpm.'

branding:
  icon: package
  color: purple

# action input values
inputs:
  name:
    description: 'Product name.'
    default: ''
    required: true
  arch:
    description: 'Build architecture.'
    default: ''
    required: true
  version:
    description: 'Product semver version.'
    default: ''
    required: true
  maintainer:
    description: 'Maintainer name.'
    default: ''
    required: false
  vendor:
    description: 'Vendor name'
    default: 'HashiCorp'
    required: false
  description:
    description: 'Product description.'
    default: ''
    required: false
  homepage:
    description: 'Product homepage.'
    default: ''
    required: false
  license:
    description: 'Product license.'
    default: ''
    required: false
  binary:
    description: 'Binary location to package.'
    default: ''
    required: false
  bin_path:
    description: 'Path to install the binary at'
    default: '/usr/bin'
    required: false
  file_permissions:
    description: 'File permissions applied to all files in the package; specify in yaml/octal format: `0o022`; if empty, permissions are unmodified.'
    default: ''
    required: false
  user_owner:
    description: 'The user name or ID that should own the files in the package; e.g.: root'
    default: ''
    required: false
  group_owner:
    description: 'The group name or ID that should own the files in the package; e.g.: root'
    default: ''
    required: false
  config_dir:
    description: 'Directory of configs in desired filesystem structure.'
    default: ''
    required: false
  deb_depends:
    description: 'Comma separated list of deb dependencies.'
    default: ''
    required: false
  rpm_depends:
    description: 'Comma separated list of rpm dependencies.'
    default: ''
    required: false
  preinstall:
    description: 'Preinstall script location.'
    default: ''
    required: false
  postinstall:
    description: 'Postinstall script location.'
    default: ''
    required: false
  preremove:
    description: 'Preremove script location.'
    default: ''
    required: false
  postremove:
    description: 'Postremove script location.'
    default: ''
    required: false
  nfpm_destination:
    description: "Where to install the nFPM binary (default: $HOME/bin/nfpm)"
    type: string
    default: "$HOME/bin/nfpm"
  nfpm_template_destination:
    description: "Where to install the nfpm_template binary (default: $HOME/bin/nfpm_template)"
    type: string
    default: "$HOME/bin/nfpm_template"
  nfpm_version:
    description: "The version of nFPM to install (default: latest)"
    type: string
    default: Latest
  do_not_override_action_ref:
    description: |
      Don't ever override this. It's a workaround for a runner bug with composite nested actions.
      See: https://github.com/actions/runner/issues/2473#issuecomment-1776051383
    default: ${{ github.action_ref }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        path: nfpm_packaging
        repository: hashicorp/actions-packaging-linux
        ref: ${{ inputs.do_not_override_action_ref }}
    - name: Install nFPM
      working-directory: nfpm_packaging
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        NFPM_DEST: ${{ inputs.nfpm_destination }}
        NFPM_VERSION: ${{ inputs.nfpm_version }}
      run: |
        VERSION=$(gh release list -R goreleaser/nfpm --exclude-drafts --exclude-pre-releases | grep "$NFPM_VERSION" | cut -f1)

        mkdir -p "$(dirname "$NFPM_DEST")"
        DESTINATION="$(readlink -f $NFPM_DEST)"
        DESTINATION_DIR="$(dirname "$DESTINATION")"
        echo "$DESTINATION_DIR" >> "$GITHUB_PATH"

        case "$RUNNER_ARCH" in
          ARM)
            printf "nfpm is not built for ARM, please build packages on X86, X64, or ARM64 runners" 1>&2
            exit 1
            ;;
          X86)
            printf "nfpm is not built for X86, please build packages on X64 or ARM64 runners" 1>&2
            exit 1
            ;;
          ARM64)
            ARCH="arm64"
            ;;
          X64)
            ARCH="x86_64"
            ;;
        esac

        OS="$RUNNER_OS"
        case "$RUNNER_OS" in
          macOS)
            OS="Darwin"
            ;;
          Windows)
            printf "this action must be run on Linux or macOS runner" 1>&2
            exit 1
            ;;
        esac

        mkdir -p tmp/nfpm
        pushd tmp/nfpm || exit 1
        gh release download "$VERSION" -p "nfpm_*_${OS}_${ARCH}.tar.gz" -O nfpm.tgz -R goreleaser/nfpm
        tar -xvf nfpm.tgz
        mv nfpm "$DESTINATION"
        popd || exit 1
        #rm -rf tmp/nfpm
    - name: Check for a Go compiler
      id: check_go
      shell: bash
      run: |
        go_installed="false"
        if type go >/dev/null 2>&1; then
          go_installed="true"
        fi
        echo "is_installed=${go_installed}" | tee -a "$GITHUB_OUTPUT"
    - if: steps.check_go.is_installed == 'false'
      uses: actions/setup-go@v5
      with:
        cache: false
        go-version-file: go.mod
    - name: Build nfpm_template binary
      shell: bash
      working-directory: nfpm_packaging
      env:
        TPL_DEST: ${{ inputs.nfpm_template_destination }}
      run: |
        mkdir -p "$(dirname "$TPL_DEST")"
        DESTINATION="$(readlink -f $TPL_DEST)"
        DESTINATION_DIR="$(dirname "$DESTINATION")"
        echo "$DESTINATION_DIR" >> "$GITHUB_PATH"
        go build -o nfpm_template .
        mv nfpm_template "$DESTINATION"
    - name: Package binary
      shell: bash
      env:
        # These environment variables are used by the template program that generates the nfpm config
        INPUT_NAME: ${{ inputs.name }}
        INPUT_ARCH: ${{ inputs.arch }}
        INPUT_VERSION: ${{ inputs.version }}
        INPUT_MAINTAINER: ${{ inputs.maintainer }}
        INPUT_VENDOR: ${{ inputs.vendor }}
        INPUT_DESCRIPTION: ${{ inputs.description }}
        INPUT_HOMEPAGE: ${{ inputs.homepage }}
        INPUT_LICENSE: ${{ inputs.license }}
        INPUT_DEPENDS: ${{ inputs.depends }}
        INPUT_BINARY: ${{ inputs.binary }}
        INPUT_BIN_PATH: ${{ inputs.bin_path }}
        INPUT_FILEPERMISSIONS: ${{ inputs.file_permissions }}
        INPUT_USEROWNER: ${{ inputs.user_owner }}
        INPUT_GROUPOWNER: ${{ inputs.group_owner }}
        INPUT_CONFIG_DIR: ${{ inputs.config_dir }}
        INPUT_PREINSTALL: ${{ inputs.preinstall }}
        INPUT_POSTINSTALL: ${{ inputs.postinstall }}
        INPUT_PREREMOVE: ${{ inputs.preremove }}
        INPUT_POSTREMOVE: ${{ inputs.postremove }}

        INPUT_DEB_DEPENDS: ${{ inputs.deb_depends }}
        INPUT_RPM_DEPENDS: ${{ inputs.rpm_depends }}
      run: |
        if ! fileo=$(file "$INPUT_BINARY"); then
          printf "could not find binary: $(pwd)\n$(ls)"
          exit 1
        else
          printf "packaging binary %s" "$fileo"
        fi

        mkdir -p ./out

        package() { local pkg_type="$1" deps="${2:-}"
          local config_file
          config_file="nfpm_${pkg_type}_config.yml"
          if ! INPUT_DEPENDS="$deps" nfpm_template > "$config_file"; then
            printf "failed to executing nfpm_template for $pkg_type"
            exit 1
          fi
          cat "$config_file"
          nfpm package -f "$config_file" -p "$pkg_type" -t ./out/
        }

        package rpm "$INPUT_RPM_DEPENDS"
        package deb "$INPUT_DEB_DEPENDS"
